{
  "name": "repo",
  "description": "Abstract cookbook for managing source code repositories.",
  "long_description": "= RightScale Repo Resource\n\n== DESCRIPTION:\n\nThis cookbook provides abstract 'repo' resource for managing code download from\nGit, Subversion or Remote Object Store code repositories.\n\n== REQUIREMENTS:\n\n* Requires a virtual machine launched from a RightScale-managed RightImage.\n* ROS implementation requires the 'rightscale::install_tools' recipe\n\n== COOKBOOKS DEPENDENCIES:\n\nPlease see <tt>metadata.rb</tt> file for the latest dependencies.\n\n* <tt>rightscale</tt>\n* <tt>repo_svn</tt>\n* <tt>repo_git</tt>\n* <tt>repo_ros</tt>\n* <tt>repo_rsync</tt>\n* <tt>repo_ftp</tt>\n\ncookbooks must be present in ServerTemplate repository.\n\n== KNOWN LIMITATIONS:\n\nThere are no known limitations.\n\n== SETUP/USAGE:\n\n* Place repo::default recipe into your runlist to setup the repo resource. When\n  using a RightScale ServerTemplate, this will also automatically add the\n  required attributes to your ServerTemplate inputs.\n* Add 'repo' resource call in your recipe and provide all required parameters.\n* Add 'destination' and 'action' attributes to your 'repo' resource.\n* Set desired action for your 'repo' resource\n  It can be :pull or :capistrano_pull\n  :pull - perform basic 'repo' action, just pulling your code from remote repo.\n  :capistrano_pull - performs pulling and backup of your code.\n  For code implementation examples look at <b>LWRPs</b> section of this README.\n\n== DETAILS:\n\n=== General\n\nThis cookbook is intended to be used in conjunction with cookbooks that contain\nLightweight Providers which implement the 'repo' interface. See the RightScale\nrepo_git cookbook for an example.\n\n=== Attributes\n\nAll attributes in this cookbook are generally used to assign values for\ncorresponding <tt>repo</tt> LWRP attribute.\n\nAll attributes in this cookbook have inputs except <b>Additional capistrano\nattributes</b> which are used internally in recipes.\n\n===== Common attributes\n\n* <tt>node[:repo][:default][:destination]</tt> - Path to where project repo will\n  be pulled. Example: \"/tmp/repo\"\n* <tt>node[:repo][:default][:repository]</tt> - The URL of your svn or git\n  repository where your application code will be checked out. Or name of the ROS\n  container if repo_ros LWRP is chosen. For Amazon S3, use the bucket name.\n  For Rackspace Cloud Files, use the container name.\n* <tt>node[:repo][:default][:revision]</tt> - Remote repo Branch, Tag or\n  revision. The default is \"HEAD\".\n* <tt>node[:repo][:default][:provider]</tt> - A repository provider:\n  <tt>repo_git</tt> for Git, <tt>repo_svn</tt> for Subversion or\n  <tt>repo_ros</tt> for Remote Object Store. The default is \"repo_git\".\n* <tt>node[:repo][:default][:perform_action]</tt> - The type pull action which\n  will be performed, 'pull'- standard repo pull, 'capistrano_pull' standard pull\n  and then capistrano deployment style will be applied. Default is: \"pull\".\n* <tt>node[:repo][:default][:account]</tt> - The account name (i.e. username, ID)\n  that is required to access files in the specified location.\n* <tt>node[:repo][:default][:credential]</tt> - A valid credential (i.e. password, SSH key, account secret)\n  to access files in the specified location.\n\n\n===== ROS attributes\n\n* <tt>node[:repo][:default][:storage_account_provider]</tt> - Location where the\n  source file is saved. Used by recipes to download from Amazon S3, Rackspace, Google,\n  Azure and  SoftLayer.\n  Cloud Files. Default is: \"S3\".\n* <tt>node[:repo][:default][:prefix]</tt> - Filename of required source\n  repository archive. Example: \"source.tar.gz\".\n\n===== Additional capistrano attributes\n\n* <tt>node[:repo][:default][:environment]</tt> - A hash of the form\n  <tt>{\"ENV_VARIABLE\"=>\"VALUE\"}</tt> ({})\n* <tt>node[:repo][:default][:symlinks]</tt> - An array of paths, relative to app\n  root, to be removed from a checkout before symlinking. Default is:({})\n* <tt>node[:repo][:default][:purge_before_symlink]</tt> - An array of paths,\n  relative to app root, to be removed from a checkout before symlinking. Default\n  is: %w{}\n* <tt>node[:repo][:default][:create_dirs_before_symlink]</tt> - Directories to\n  create before symlinking. Runs after purge_before_symlink. Default is: %w{}\n\n=== Definitions:\n\n<b>repo_capistranize</b>\n\nDefinition used to create Capistrano style project deployment.\nFor more information about capistrano see {The Deploy Strategies}[http://wiki.opscode.com/display/chef/Deploy+Resource#DeployResource-TheDeployStrategies].\n\nParameters:\n\nAll parameters in this definition are linked to corresponding attributes.\nHowever if you use this definition for your own purposes you can redefine them.\nSee example below.\n\n* <tt>:destination</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:destination]</tt> in attributes section of this\n  README.\n* <tt>:repository</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:repository]</tt> in attributes section of this\n  README.\n* <tt>:revision</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:revision]</tt> in attributes section of this\n  README.\n* <tt>:svn_username</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:account]</tt> in attributes section of this\n  README.\n* <tt>:svn_password</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:credential]</tt> in attributes section of this\n  README.\n* <tt>:app_user</tt> - User that will be owner of created project deployment.\n* <tt>:environment</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:environment]</tt> in attributes section of this\n  README.\n* <tt>:create_dirs_before_symlink</tt> - Receive value of corresponding\n  attribute. See <tt>node[:repo][:default][:create_dirs_before_symlink]</tt> in\n  attributes section of this README.\n* <tt>:purge_before_symlink</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:purge_before_symlink]</tt> in attributes section of\n  this README.\n* <tt>:symlinks</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:symlinks]</tt> in attributes section of this\n  README.\n* <tt>:scm_provider</tt> - Receive value of corresponding attribute. See\n  <tt>node[:repo][:default][:provider]</tt> in attributes section of this\n  README.\n\nExample:\n\n  repo_capistranize \"Source repo\" do\n    repository                 your_repository_variable\n    revision                   revision_variable\n    destination                destination_variable\n    app_user                   app_user_variable\n    purge_before_symlink       purge_before_symlink_variable\n    create_dirs_before_symlink create_dirs_before_symlink_variable\n    symlinks                   symlinks_variable\n    scm_provider               scm_provider_variable\n    environment                environment_variable\n  end\n\n\n=== LWRPs:\n\n==== Resources\n\nThis cookbook provides abstract <tt>repo</tt> resource. Which will be used to\ncall existing or user defined Light Weight repo_* providers.\n\nSupported cookbooks are repo_ros, repo_git and repo_svn cookbooks. Each of them\ncontain implementation of corresponding repo_* Light Weight Provider which can\nbe called using this resource.\n\n===== Actions:\n\n<tt>:pull</tt>\nStandard repo pull. Your source code repository will be pulled from remote url\nto specified destination.\n\n<tt>:capistrano_pull</tt>\nPerform standard pull and then capistrano deployment style will be applied.\n\n===== Attributes:\n\nThese are settings used in recipes and templates. Default values should be noted.\n\nNote: Only \"internal\" cookbook attributes are described here. Descriptions of attributes which have inputs can be found in the metadata.rb cookbook file.\n\n* <tt>destination</tt> - Path to where project repo will be pulled\n* <tt>revision</tt> - Remote repo Branch or revision\n* <tt>account</tt> - Account name\n* <tt>credential</tt> - Account credential\n* <tt>svn_arguments</tt> - Extra arguments passed to the subversion command\n* <tt>app_user</tt> - System user to run the deploy as\n* <tt>purge_before_symlink</tt> - An array of paths, relative to app root, to be\n  removed from a checkout before symlinking\n* <tt>create_dirs_before_symlink</tt> - Directories to create before symlinking.\n  Runs after purge_before_symlink\n* <tt>symlinks</tt> - A hash that maps files in the shared directory to their\n  paths in the current release\n* <tt>environment</tt> - A hash of the form {\"ENV_VARIABLE\"=>\"VALUE\"}\n* <tt>prefix</tt> - The prefix that will be used to name/locate the backup of a\n  particular code repo.\n* <tt>storage_account_provider</tt> - Location where dump file will be saved.\n  Used by dump recipes to back up to Amazon S3 or Rackspace Cloud Files.\n* <tt>unpack_source</tt> - Unpack downloaded source or not Source file must be\n  kind of tar archive Default: false\n\n===== Usage Example:\n\n:pull\n\n  repo \"default\" do\n    destination \"/tmp/repo\"\n    action :pull\n  end\n\n:capistrano_pull\n\n  repo \"default\" do\n    destination \"/tmp/repo\"\n    action :capistrano_pull\n    app_user                    'rightscale' #owner of created repo directories\n    purge_before_symlink        %w{tmp} #An array of paths, relative to app root, to be removed from a checkout before symlinking\n    create_dirs_before_symlink  %w{log dir2}  #A hash that maps files in the shared directory to their paths in the current release\n    symlinks                    ({}) #A hash that maps files in the shared directory to their paths in the current release\n    environment                 ({}) #A hash of the form {'ENV_VARIABLE'=>'VALUE'}\n  end\n\n== LICENSE:\n\nCopyright RightScale, Inc. All rights reserved.  All access and use subject to the\nRightScale Terms of Service available at http://www.rightscale.com/terms.php and,\nif applicable, other agreements such as a RightScale Master Subscription Agreement.\n",
  "maintainer": "RightScale, Inc.",
  "maintainer_email": "support@rightscale.com",
  "license": "Copyright RightScale, Inc. All rights reserved.",
  "platforms": {
  },
  "dependencies": {
    "rightscale": ">= 0.0.0",
    "repo_svn": ">= 0.0.0",
    "repo_git": ">= 0.0.0",
    "repo_ros": ">= 0.0.0",
    "repo_ftp": ">= 0.0.0",
    "repo_rsync": ">= 0.0.0"
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
    "repo/default/provider": {
      "display_name": "Repository Provider",
      "description": "Specify where the application code should be checked out from. Example: repo_git",
      "required": "recommended",
      "choice": [
        "repo_git",
        "repo_svn",
        "repo_ros",
        "repo_ftp",
        "repo_rsync"
      ],
      "default": "repo_git",
      "recipes": [
        "repo::default"
      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/repository": {
      "display_name": "Repository URL/ROS Container",
      "description": "The URL that points to the location of the repository that contains the application code. Or the name of the ROS container where a tarball of the application code will be retrieved from if you use 'repo_ros' provider. For Amazon S3, use the bucket name. Example: mycontainer, http://mysvn.net/app/ or git://github.com/username/myapp.git",
      "required": "required",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/revision": {
      "display_name": "Repository Branch/Tag/Commit",
      "description": "The specific branch, tag, or commit (SHA) of the specified Git/Subversion repository that the application code will be retrieved from. For Git repositories, use 'master' to retrieve the master branch from the repository. For SVN repositories, use 'HEAD' to retrieve the latest changes from the repository. Example: mybranch",
      "required": "recommended",
      "default": "master",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/account": {
      "display_name": "Account name",
      "description": "The account name (i.e. username, ID) that is required to access files in the specified location. This input is optional and may not be required. Example: cred:RACKSPACE_USERNAME",
      "required": "recommended",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/credential": {
      "display_name": "Account credential",
      "description": "A valid credential (i.e. password, SSH key, account secret) to access files in the specified location. This input is always required for Git and Rsync but may be optional for other providers. Example: cred:RACKSPACE_AUTH_KEY",
      "required": "recommended",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/ssh_host_key": {
      "display_name": "Known hosts ssh key",
      "description": "A valid SSH key which will be appended to /root/.ssh/known_hosts file. This input will allow to verify the destination host, by comparing its IP,FQDN, SSH-RSA with the record in /root/.ssh/known_hosts file. Use this input if you want to improve security and for MiTM attacks prevention. Example: cred:SSH_KNOWN_HOST_KEY.",
      "required": "optional",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/perform_action": {
      "display_name": "Action",
      "description": "Specify how the application code will be pulled from the specified repository. 'pull'- standard repository pull, 'capistrano_pull' standard repository pull plus a capistrano deployment style is applied. Example: pull",
      "choice": [
        "pull",
        "capistrano_pull"
      ],
      "default": "pull",
      "required": "optional",
      "recipes": [
        "repo::default"
      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/destination": {
      "display_name": "Project App root",
      "description": "The destination location where the application code will be placed on the local instance. If you want the application code to be placed in the root directory, use a forward slash (/) otherwise you will need to specify the full path (e.g. /path/to/code). Example: /home/webapps",
      "default": "/home/webapps",
      "required": "optional",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/storage_account_provider": {
      "display_name": "ROS Storage Account Provider",
      "description": "The Remote Object Storage (ROS) service where the tarball of the application code will be retrieved from. Example: s3",
      "required": "optional",
      "choice": [
        "s3",
        "cloudfiles",
        "cloudfilesuk",
        "google",
        "azure",
        "SoftLayer_Dallas",
        "SoftLayer_Singapore",
        "SoftLayer_Amsterdam"
      ],
      "recipes": [
        "repo::default"
      ],
      "calculated": false,
      "type": "string"
    },
    "repo/default/prefix": {
      "display_name": "ROS Prefix",
      "description": "The prefix that will be used to locate the correct tarball of the application. For example, if you're using 'myapp.tgz' specify 'myapp' as the ROS Prefix. Example: myapp",
      "required": "optional",
      "recipes": [
        "repo::default"
      ],
      "choice": [

      ],
      "calculated": false,
      "type": "string"
    }
  },
  "groupings": {
  },
  "recipes": {
    "repo::default": "Sets up repo resource and provider."
  },
  "version": "13.3.0"
}